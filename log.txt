2020.2.8
    -- 初始化项目
    -- 安装stylus npm install stylus stylus-loader --save-dev
    -- stylus 用于转换为css ,stylus-loader让webpack解析（理解）stylus
    -- 语法
        <style lang = "stylus" rel = "stylesheet/stylus">
            .....
        </style>

        结构化，完全通过缩进控制，不需要大括号和分号，冒号是可选的

    -- 增加组件目录
    -- 引入reset样式 http://meyerweb.com/eric/tools/css/reset/
    -- FastClick 移动端0.3秒的延迟

2020.2.9
    -- 引入路由 cnpm install vue-router --save
    -- 定义路由 msite order订单 search查询 profile个人中心
    -- 导航实现路由切换
        - 通过编程式导航实现路由的切换显示
        - 通过动态class和$route.path来实现tab样式切换
        - 通过阿里图标显示导航图标

    -- 图片资源与静态页面
    -- 封装头部组件(HeaderTop)(公共组件封装)(slot 传递标签，props传递数据)
        - slot 占位符
        - props父传子

    -- swiper库定义轮播
        - cnpm install --save swiper
        - 引入swiper的js与样式
        - 使用 new Swiper('',{})

    -- 商家列表拆分（ShopList）

    -- 登入与注册（Login）
    
    -- 添加后台

2020.2.10 
    -- 安装 axios cnpm install --save axios
    -- ajax函数封装（默认get请求） axios + promise  （api->ajax.js）
    -- 定义请求函数模块

    -- 配置代理实现跨域ajax请求

    -- 使用vuex管理状态 cnpm install --save vuex

    -- 读取当前位置：发送请求，读取状态，绑定（展示）数据
    -- 读取食品分类列表
        - 根据一维数组生成二维数组
        - 数据正常渲染，轮播bug
           原因：Swiper必须在列表显示之后才能被创建（开始是一个空数组，数据是后加载的）
           解决：通过watch（还是会延迟）
                -- 状态改变跟界面显示是两步，第一步先更新状态数据，第二次才异步更新界面
                -- 通过setTimeout延迟创建可以实现但不是最佳的
                -- 最佳 nextTick(callback),一旦界面更新就立即调用(将回调延迟到下次dom更新循环之后)
    -- 商家列表数据展示
    -- svg图片在数据未加载前显示在页面上

    -- 星星（Star）组件
       -- 星星算法
            3.2 ： 3（全星） 0（半星） 1（灰星）
            3.5 ： 3（全星） 1（半星） 1（灰星）

2020.2.11
    -- 登录动态效果
       - 登录切换
       - 手机号检查（必须输入合法的手机号才能进行获取验证码并且按钮字体高亮）
       - 倒计时效果
          - 表单中的按钮默认点击是会提交表单的  @click.prevent="getCode" （prevent禁止默认行为）
       - 切换密码显示隐藏
          - 通过定义变量为Boolean去操控样式
       - 增加消息弹框
       - 表单验证
          - 数据搜集
          - 数据验证

       - 动态显示图形验证码
       - 短信验证码 https://www.yuntongxun.com
           - 第三方对接
       - 登录
           - 更新用户中心
       - 自动登录
       - 退出登录
       - 使用 mint-ui 
           - 安装 cnpm install --save mint-ui
           - 安装按需打包 cnpm install --save-dev babel-plugin-component
              - 修改babel配置 (以下配置针对mint-ui按需打包)
              "plguins":["transform-runtime",["component",[
                  {
                      "libraryName":"mint-ui",
                      "style":true
                  }
              ]]]
          

2020.2-12  
    -- 商家界面搭建
         - 拆分并定义路由 shop  shopGoods ShopInfo ShopRatings ShopHeader

    -- 模拟mock数据（后台接口未定义，模拟数据）
       -- 设计数据格式：结构与类型与后台一致，变得只是值
       -- 安装mockjs cnpm install --save mockjs
          - 编写 mockServer.js
          - 在入口文件中使用mockServer.js
          - ajax请求mock.js模拟接口

    -- 商家头部组件
    -- 显示食品列表 ShopGoods
        -- 拆分组件 cartControl shopCart Food
        

2020.2.13 
     -- 使用第三方库 better-scroll 滑动 cnpm install better-scroll --save
     -- 列表滑动(列表显示之后创建)
         - 通过调用异步的action，传递回调数的方式，当数据已经更新了state，在去创建
     
     -- 通过滑动更新当前分类
        - 绑定滑动事件搜集 scrollY   
        - 页面渲染之后搜集所有li距离顶部的距离 tops
        - currentIndex 计算属性，根据条件产生结果
          - 根据scrollY，在tops中通过（findIndex）找到下标，如果 当前滚动位置的坐标（scrollY） >= 当前top 并且 当前滚动位置的坐标（scrollY） < 下一个top
          - 最后返回下标

     -- 点击分类滑动列表
        - 给li增加事件，传递当前下标
        - 通过下标在tops中找到右侧某个分类距离顶部的距离
        - 将找到距离赋值给scrollY,scrollY变化了，计算属性也会被更新，因此显示了当前的分类
        - 通过 foodsScroll的scrollTo方法，传递当前scrollY的坐标平滑滚动
    
    -- 控制组件（增加减少）
        - 定义接收一个对象（商家食物，每一个食物都是由一个对象去装的）
        - 增加控制方法，调用同步action（因为数据被state统一管理所以直接通过action去修改其中的值），根据传递的flag去判断是增加还是减少
        - 动态添加一个属性需要用 Vue.set(对象，属性名，属性值)，food.count = 1:此方法vue不会对数据进行绑定 
        - （在已经有数据绑定的数据里面添加一个属性数据，这个新的数据一开始是没有数据绑定的，所以通过Vue.set方法可以实现）
        - 食物详情也会用到，所以达到了组间的复用并且通过action去更改state，维护性更好，数据方便管理
    
    -- 食物详情
        - 定义组件，接收食物对象，定义显示隐藏方法
        - 父组件调用子组件的方法，先标识子组件标签，通过组件标签就可以得到子组件的方法
        - 引入控制组件达到组件的复用
        - 点击控制组件的按钮会事件冒泡，所以将控制组件中的事件停止冒泡

    -- 购物车
        - vuex 管理
            - 定义state cartFoods
            - 在getters中定义计算属性
            - mutations 中更改加入商品或移除商品
            - 在shopCart中读取getter中属性
            - 基本数据渲染
        - 购物车商品渲染
            - 定义计算属性，商品数量大于0并且 定义的属性为true的时候才进行显示


2020.2.14
        - 购物车增加动画
        - 当列表显示的时候才对其进行创建，此时会有问题，因为每一次列表显示都会创建一个对象
           - 会出现点击增加商品数量时，都会触发按钮的监听
           - 解决：保证创建的对象实例是唯一的,将实例对象保存在当前组件中 this.scroll = new BScroll('xxx')
        
        - 清空购物车
           - 调用同步action
        
        - 商品评价组件
            - 调用异步评价action
            - 读取ratings与info
            -- 数据渲染
            -- 评价列表过滤显示

        - 商家信息
            - 信息渲染
            - 滑动效果
            
        - 查询
     

2020.2.16
        - 缓存路由组件
            - 比如点餐页面，当已选择了商品，然后切换到评价页面在切换回来数据会重新加载
            - 在 router-view 上套用 keep-alive （缓存路由组件对象）
        - 路由组件懒加载 
            - 首先所有的js都是打成了一个包，但我我们是多路由代码，我们有的路由只是在我们需要的时候才去创建
            - 将路由组件通过函数返回的方式，只有执行函数的时候才会加载路由,这个函数会在请求对应的路由路径时才会执行
        
        - 图片懒加载
            - 安装 vue-lazyload ,cnpm install --save vue-lazyload
            - 引入 import VueLazyload from 'vue-lazyload'
            - 引人图片 import loading from './common/images/loading-bars.svg';
            - 使用 
                Vue.use(VueLazyload,{ // 内部自定义一个指令 lazy
                   loading
                }) 
        
        -- 日期过滤
               - 安装moment cnpm install --save moment
               - 自定义过滤器
               - 在main.js将该过滤器运行加载
               - 组件中使用   <div class="time">{{rating.rateTime | date-fromat}}</div>




